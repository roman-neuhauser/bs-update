#!/bin/sh
# vim: fdm=marker cms=\ #\ %s

set -o errexit
set -o nounset
set -o posix

bsu_bs_apiurl=
bsu_bs_package=
bsu_bs_project=
bsu_dloadurl=

bsu_dry_run=0

if test -f .bs-update-hooks; then
  . $PWD/.bs-update-hooks
fi

if test -f .bs-update; then
  . $PWD/.bs-update
fi

usage() # {{{
{
  local self="$SELF" exit=${1?} fd=1
  test $exit -ne 0 && fd=2
  {
    if test $exit -eq 1; then
      printf "%s: missing <tag> argument\n" "$self"
    elif test $exit -eq 2; then
      printf "%s: option -%c requires an argument\n" "$self" "$2"
    elif test $exit -eq 3; then
      printf "%s: unknown option -%c\n" "$self" "$2"
    elif test $exit -eq 4; then
      printf "%s: no %s specified\n" "$self" "$2"
    fi
    printf "%s: Usage: %s {-h|[options] <tag>}\n" "$self" "$self"
    if test $exit -ne 0; then
      printf "%s: Use \"%s -h\" to see the full option listing.\n" "$self" "$self"
    else
      printf "  Options:\n"
      printf "    %-16s  %s\n" \
        "-h"              "Display this message" \
        "-A BSAPI"        "Use Build Service at BSAPI (URL or alias)" \
        "-P PROJECT"      "Update Build Service package of PROJECT" \
        "-p PACKAGE"      "Update Build Service package named PACKAGE" \
        "-t URL"          "Fetch the tarball from URL"
    fi
  } >&$fd
  if test $exit -eq 0; then
    exit 0
  else
    exit 1
  fi
} # }}}

SELF=$(basename "$0")

while getopts :A:P:hnp:t: optname; do
  case $optname in
  A) bsu_bs_apiurl=$OPTARG ;;
  P) bsu_bs_project=$OPTARG ;;
  h) usage 0 ;;
  n) bsu_dry_run=1 ;;
  p) bsu_bs_package=$OPTARG ;;
  t) bsu_dloadurl=$OPTARG ;;
  :) usage 2 $OPTARG ;; # option-argument missing
  ?) usage 3 $OPTARG ;; # unknown option
  esac
done
shift $(($OPTIND - 1))

if test $# -lt 1; then
  usage 1
fi

deref() # {{{
{
  local prev='' result="${1?}"
  while test "$result" != "$prev"; do
    prev="$result"
    result="$(eval echo "$result")"
  done
  echo "$result"
} # }}}

bsu_tag=$1

bsu_version=${bsu_tag#v}
bsu_tarball=$bsu_bs_package-$bsu_version.tar.gz

bsu_bs_apiurl="$(deref \"$bsu_bs_apiurl\")"
bsu_bs_project="$(deref \"$bsu_bs_project\")"
bsu_dloadurl="$(deref \"$bsu_dloadurl\")"

test -n "$bsu_bs_package" || usage 4 package
test -n "$bsu_bs_project" || usage 4 project
test -n "$bsu_dloadurl" || usage 4 tarball

pkgdir=$bsu_bs_project/$bsu_bs_package
specfile=$bsu_bs_package.spec

if test 0 -ne $bsu_dry_run; then
  printf '%16s = "%s"\n' \
    bsu_bs_apiurl "$bsu_bs_apiurl" \
    bsu_bs_project "$bsu_bs_project" \
    bsu_bs_package "$bsu_bs_package" \
    bsu_dloadurl "$bsu_dloadurl" \
    bsu_tag "$bsu_tag" \
    bsu_version "$bsu_version" \
    pkgdir "$pkgdir" \
    bsu_tarball "$bsu_tarball" \
    specfile "$specfile"
  exit $?
fi

osc() # {{{
{
  local bsapi=${bsu_bs_apiurl}
  command osc ${bsapi:+-A "$bsapi"} ${1+"$@"}
} # }}}
fetch() # {{{
{
  local url=${1?} tarball=${2?}
  wget -qO $tarball $url
} # }}}
repack() # {{{
{
  local tarball=${1?}
  local dir=${tarball%.tar.gz}
  mkdir $dir
  tar -xzf $tarball --strip-components=1 -C $dir
  run_tarball_hook $dir
  tar -czf $tarball $dir
  rm -rf $dir
} # }}}
run_tarball_hook() # {{{
(
  local dir=${1?}
  if ! type bsu_tarball_hook 1>/dev/null 2>&1; then
    return 0
  fi
  cd $dir
  bsu_tarball_hook $dir
) # }}}
extract() # {{{
{
  local tarball=${1?}
  local file=${tarball%.tar.gz}/${2?}
  tar -xzf $tarball --strip-components=1 $file
} # }}}
update() # {{{
{
  case $1 in
  *.spec)  update_specfile "$@" ;;
  *.tar.*) update_tarball "$@" ;;
  esac
} # }}}
update_specfile() # {{{
{
  local specfile=${1?} version=${2?}
  cp $specfile.in $specfile
  sed -ri '/^Version:/s/__VERSION__/'$version'/' $specfile
  if osc st $specfile | grep -q '^?'; then
    osc add $specfile
  fi
} # }}}
update_tarball() # {{{
{
  local tarball=${1?} rewrite=0
  if test -f $pkgdir/$tarball; then
    rewrite=1
  fi
  if test 0 -eq $rewrite && test -f $pkgdir/$bsu_bs_package-*.tar.gz; then
    osc rm $pkgdir/$bsu_bs_package-*.tar.gz
  fi
  mv $tarball $pkgdir
  if test 0 -eq $rewrite; then
    osc add $pkgdir/$tarball
  fi
} # }}}
exithook() # {{{
{
  rm -rf $root
} # }}}

trap exithook EXIT
root=$(mktemp -d)
echo "$SELF: root=$root"
cd $root
osc co $pkgdir
fetch $bsu_dloadurl $bsu_tarball
repack $bsu_tarball
update $bsu_tarball
cd $pkgdir
extract $bsu_tarball $specfile.in
update $specfile $bsu_version
#osc build
osc ci -m "Update to version $bsu_version"
