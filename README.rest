.. vim: ft=rst sts=2 sw=2 tw=70
.. default-role:: literal

======================================================================
                              bs-update
======================================================================

:Author: Roman Neuhauser
:Contact: rneuhauser@suse.cz
:Copyright: This document is in the public domain.

.. This file is marked up using reStructuredText.
   Lines beginning with ".." are reST directives.
   "foo_" or "`foo bar`_" is a link, defined at ".. _foo" or
   ".. _foo bar".
   "::" introduces a literal block (usually some form of code).
   "`foo`" is some kind of identifier.
   Suspicious backslashes in the text ("`std::string`\s") are required
   for reST to recognize the preceding character as syntax.


Overview
========

`bs-update`_ makes it easier to keep packages in a `Build Service`_
up-to-date with respect to their upstream sources.

Given a Build Service API URL, project and package names, a tarball
URL, and a version number, `bs-update`_ will

* fetch the tarball from the URL,
* check out the package from the Build Service,
* update the tarball source with the downloaded tarball,
* update the spec file source with a template from that tarball,
* commit the changes.

`bs-update` is young software and currently makes a few assumptions:

* your package uses a single tarball
* said tarball contains a `$package.spec.in` file

.. _bs-update: https://github.com/roman-neuhauser/bs-update
.. _Build Service: https://en.opensuse.org/Build_Service

Prerequisities
==============

* POSIX-compatible shell environment
* `git(1)`_
* `osc(1)`_
* tar(1)
* `wget(1)`_

.. _git(1): http://git-scm.com/
.. _osc(1): http://en.opensuse.org/openSUSE:OSC
.. _wget(1): http://www.gnu.org/software/wget/

Usage
=====

::

  bs-update -h
  bs-update [-A BSAPI] [-C] [-P PROJECT] [-b] [-d URL] [-m COMMITMSG] [-n]
            [-p PACKAGE] [-s SPECFILE] [-t TARBALL] TAG [VERSION]

Options:

-h
    Display a usage description.
-A BSAPI
    Use Build Service at *BSAPI* (URL or alias).
-C
    Skip the `osc commit` step.
-P PROJECT
    Update Build Service package of *PROJECT*.
-b
    Run `osc build` before `osc commit`.
    If the build fails, `bs-update` aborts.
-d URL
    Download the source tarball from *URL*.
    If *URL* is `.`, `bs-update` uses `git-archive(1)`_ in `$PWD`.
    Otherwise, `bs-update` uses `wget(1)`_.
-m COMMITMSG
    Use *COMMITMSG* for the commit in Build Service.
    Defaults to "Update to version *VERSION*".
-n  Report values derived from configuration files
    and command line arguments, then exit.
-p PACKAGE
    Update Build Service *PACKAGE*.
-s SPECFILE
    Use *SPECFILE*.in from *TARBALL*, commit *SPECFILE* into
    the Build Service.
    All occurrences of `__VERSION__` in *SPECFILE* are replaced
    with *VERSION*.
-t TARBALL
    Use *TARBALL* for the name of the downloaded file.

.. _git-archive(1): http://git-scm.com/docs/git-archive

Operands:

*TAG*
    Update the package from *TAG*.
*VERSION*
    Update the package to `VERSION`.
    If *VERSION* is not given, it is derived using
    `bsu_version_hook()`, and if that does not exist,
    from *TAG* by stripping the initial `v` if any.

Configuration
=============

`bs-update` recognizes two optional configuration files,
`.bs-update-hooks` and `.bs-update`.
They are sourced, in order, from the current directory before
command line arguments are processed.

.. Note::
  `bs-update` makes zero effort to protect itself against
  these two configuration files.
  Do not pollute the global scope with functions or variables
  that are not members of the described interface.

These two files are expected to provide `bs-update` with any
of the following:

Shell functions
***************

`bsu_tarball_hook`
  The tarball may need finalization before it is checked into
  the Build Service, eg. `autoconf`, `git` submodules or `npm`.
  If this function exists it is executed at the root of the
  extracted tarball before it is packed again.
`bsu_version_hook`
  If the `VERSION` argument is not given and this function exists
  it is executed with `$1` set to the value
  of the `TAG` argument, and its output is used as the final
  version string.

Variables
*********

* `bsu_bs_apiurl` (`-A`)
* `bsu_bs_commit` (`-C`)
* `bsu_bs_commitmsg` (`-m`)
* `bsu_bs_package` (`-p`)
* `bsu_bs_project` (`-P`)
* `bsu_dloadurl` (`-d`)
* `bsu_dryrun` (`-n`)
* `bsu_specfile` (`-s`)
* `bsu_tarball` (`-t`)
* `bsu_test_build` (`-b`)

Installation
============

::

  git clone https://github.com/roman-neuhauser/bs-update.git
  cd bs-update
  make wc check install

The provided makefile requires GNU make.

Examples
========

Interactive Use by Upstream Maintainer
**************************************

This is a real-world example showing common `.bs-update` setup and the
use of `bs-update` to test changes in the package and finally produce
a new package version.
It assumes the user maintains both the upstream software and its
package in the Build Service.

We need a working copy to hack on:  ::

  git clone git@github.com:roman-neuhauser/bs-update.git
  cd bs-update

Since we're going to use `bs-update` repeatedly, it makes sense
to employ a configuration file, `.bs-update`.
Everything can still be overriden using options on the command line:

::

  cat > .bs-update
  u=roman-neuhauser
  p=bs-update
  bsu_bs_apiurl=https://api.opensuse.org
  bsu_bs_package='$p'
  bsu_bs_project='home:$u'
  bsu_dloadurl='https://github.com/$u/$p/tarball/$bsu_tag'
  ^D

Commit some changes:  ::

  vim bs-update.in
  make check
  git commit bs-update.in

Build the package locally, using the currently checked out revision.
Does not commit into the Build Service:  ::

  bs-update -Cbd . HEAD 999

If it was ok we can tag it and publish the tag:  ::

  git tag -a v42.69
  git push origin master v42.69

Commit the new release into the Build Service:  ::

  bs-update v42.69

Snapshot-generating Cronjob
***************************

This exmaple demonstrates using `bs-update` with no `.bs-update`
file.  A new version of the package is created, based on a tarball
of the upstream master branch.  ::

  ts=$(date +%Y%m%d%H%M%S)
  bs-update \
    -P home:roman-neuhauser \
    -p bs-update-snapshot \
    -d https://github.com/roman-neuhauser/bs-update/tarball/master \
    -t bs-update-$ts.tar.gz \
    master $ts

