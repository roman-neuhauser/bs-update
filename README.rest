.. vim: ft=rst sts=2 sw=2 tw=70
.. default-role:: literal

======================================================================
                              bs-update
======================================================================

:Author: Roman Neuhauser
:Contact: rneuhauser@suse.cz
:Copyright: This document is in the public domain.

.. This file is marked up using reStructuredText.
   Lines beginning with ".." are reST directives.
   "foo_" or "`foo bar`_" is a link, defined at ".. _foo" or
   ".. _foo bar".
   "::" introduces a literal block (usually some form of code).
   "`foo`" is some kind of identifier.
   Suspicious backslashes in the text ("`std::string`\s") are required
   for reST to recognize the preceding character as syntax.


Overview
========

`bs-update`_ makes it easier to keep packages in a `Build Service`_
up-to-date with respect to their upstream sources.

Given a Build Service API URL, project and package names, a tarball
URL, and a version number, `bs-update`_ will

* fetch the tarball from the URL,
* check out the package from the Build Service,
* update the tarball source with the downloaded tarball,
* update the spec file source with a template from that tarball,
* commit the changes.

`bs-update` is young software and currently makes a few assumptions:

* your package uses a single tarball
* said tarball contains a `$package.spec.in` file where `$package`
  is the name of the Build Service package

.. _bs-update: https://github.com/roman-neuhauser/bs-update
.. _Build Service: https://en.opensuse.org/Build_Service

Prerequisities
==============

* POSIX-compatible shell environment
* osc(1) (http://en.opensuse.org/openSUSE:OSC)
* tar(1)
* wget(1) (http://www.gnu.org/software/wget/)

Installation
============

::

  git clone https://github.com/roman-neuhauser/bs-update.git
  cd bs-update
  make wc check install

The provided makefile requires GNU make.

Example
=======

::

  git clone git@github.com:roman-neuhauser/rnt.git
  cd rnt
  printf "%s='%s'\n" \
    package rnt \
    dloadurl 'https://github.com/roman-neuhauser/$package/tarball/$tag' \
    > .bs-update
  vim GNUmakefile
  git commit -a
  git tag -a v42.69
  git push origin master v42.69
  bs-update -P home:roman-neuhauser v42.69


Hooks
=====

Some times you may require to run a script before repackaging the tarball.
For example, if you have a ruby on rails application, you may want to
run "bundle package" in order to bundle the needed gems into your vendor
directory.

In order to do that, bs-update will check if there is a script called
"pre-package" inside the tarball. If so, it will run the script before
recreating the tarball.

Thus, in the ruby on rails case, you will place a script into your tarball
called pre-package with the "bundle package" command in it.

